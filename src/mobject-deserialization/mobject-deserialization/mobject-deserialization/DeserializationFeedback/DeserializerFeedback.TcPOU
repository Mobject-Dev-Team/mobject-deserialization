<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="DeserializerFeedback" Id="{f214615a-08ee-0733-2ef4-ac193483fe04}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK DeserializerFeedback IMPLEMENTS I_DeserializerFeedback
VAR
	errors : Stack;
	_hasError : BOOL;
	nullError : NullError;
	deserializationErrorFactory : DeserializationErrorFactory;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{bf8288b5-a589-07f1-35d4-59841682861e}" />
    <Folder Name="Private" Id="{cbf1d272-4fa4-03b9-3cb3-10553853ba10}" />
    <Method Name="DisposeErrors" Id="{248b7186-74cd-01b9-273e-46d8064a620f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeErrors : BOOL
VAR
	error : I_Error;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE errors.TryPop(error) DO
	error.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{7c2b5a54-33d0-0a42-1844-337f21f07fca}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeErrors();]]></ST>
      </Implementation>
    </Method>
    <Property Name="FirstError" Id="{51d64554-ca38-0cb7-0c52-30b0cce12708}">
      <Declaration><![CDATA[PROPERTY PUBLIC FirstError : I_Error]]></Declaration>
      <Get Name="Get" Id="{6c1860f6-35f5-0a7e-3259-3093ed9a2296}">
        <Declaration><![CDATA[VAR
	error : I_Error;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT HasError THEN
	FirstError := nullError;
	RETURN;
END_IF

IF NOT errors.TryPeek(error) THEN
	FirstError := nullError;
	RETURN;
END_IF

FirstError := error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HasError" Id="{e708940b-3197-0b0b-1959-baf7df63f3a6}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasError : BOOL]]></Declaration>
      <Get Name="Get" Id="{12d8fcd3-ea42-0ba4-0d9e-a64351b0f1f2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasError := _hasError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="LogDeserializationFailedError" Id="{e31e8527-95e4-0485-1ab9-2602831a8170}">
      <Declaration><![CDATA[METHOD PUBLIC LogDeserializationFailedError
VAR_INPUT
	Message : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogError(deserializationErrorFactory.CreateCustomDeserializationFailedError(Message));]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogError" Id="{b4cb288e-5a90-0f06-39bb-4e1208f0e8a7}">
      <Declaration><![CDATA[METHOD PUBLIC LogError
VAR_INPUT
	Error : I_Error;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[errors.Push(Error);
_hasError := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogIncorrectKeyTypeError" Id="{d07065b8-5d1f-0c80-2688-b664ebf2b68d}">
      <Declaration><![CDATA[METHOD PUBLIC LogIncorrectKeyTypeError
VAR_INPUT
	ExpectedType : T_MAXSTRING;
	ActualKey : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogError(deserializationErrorFactory.CreateIncorrectKeyTypeError(ExpectedType, ActualKey));]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogIncorrectTypeError" Id="{6ecbfe6e-5ff1-02a9-0365-d5b1cff19663}">
      <Declaration><![CDATA[METHOD PUBLIC LogIncorrectTypeError
VAR_INPUT
	ExpectedType : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogError(deserializationErrorFactory.CreateIncorrectTypeError(ExpectedType));]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogInvalidKeyError" Id="{8eb3ae14-33b0-06f1-355e-9e8851ce25cb}">
      <Declaration><![CDATA[METHOD PUBLIC LogInvalidKeyError
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogError(deserializationErrorFactory.CreateInvalidKeyError());]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogMissingKeyError" Id="{cb5b362d-6529-07f2-2c55-3a2c44c01822}">
      <Declaration><![CDATA[METHOD PUBLIC LogMissingKeyError
VAR_INPUT
	ExpectedKey : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogError(deserializationErrorFactory.CreateMissingKeyError(ExpectedKey));]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{fbb72e83-2181-0d05-3dcf-93c9b065d657}">
      <Declaration><![CDATA[METHOD PUBLIC Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisposeErrors();
_hasError := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{75c1d834-8196-080b-0a94-2762624f211b}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasError THEN
	RETURN;
END_IF

Serializer.AddKey('errors');
Serializer.StartArray();

enumerator := errors.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(error) THEN
		error.SerializeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();
Serializer.EndArray();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>