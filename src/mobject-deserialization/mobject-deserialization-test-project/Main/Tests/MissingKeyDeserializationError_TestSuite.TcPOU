<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MissingKeyDeserializationError_TestSuite" Id="{b70e347a-a69b-081e-1f13-52157cf195c9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MissingKeyDeserializationError_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAccept();
TestErrorType();
TestIsSameAsWithSameErrors();
TestIsSameAsWithDifferentErrors();
TestMessage();
TestSerializeWith();]]></ST>
    </Implementation>
    <Method Name="TestAccept" Id="{a76fda00-c17c-077d-0913-cd48d512f9d2}">
      <Declaration><![CDATA[METHOD PUBLIC TestAccept
VAR
	error : MissingKeyDeserializationError('testKey');
	visitor : MockVisitor(ExpectedError := error);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAccept');

error.Accept(visitor);

AssertTrue(
	Condition := visitor.VisitedCorrectError,
	Message := 'Did not invoke VisitError on the visitor'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestErrorType" Id="{c3e791f1-eff7-0d7b-3182-1a70d2f3ef41}">
      <Declaration><![CDATA[METHOD PUBLIC TestErrorType
VAR
	error : MissingKeyDeserializationError('testKey');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestErrorType');

AssertEquals_String(
	Actual := error.ErrorType,
	Expected := 'MISSING_KEY_DESERIALIZATION_ERROR',
	Message := 'Did not return the expected ErrorType'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithDifferentErrors" Id="{dd37ab02-163c-07f5-3940-73b2098ae3d9}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithDifferentErrors
VAR
	error1 : MissingKeyDeserializationError('testKey');
	error2 : MockError(MockErrorType:='ERROR_TYPE_B',MockMessage:='Message 2');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithDifferentErrors');

AssertFalse(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being different type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithSameErrors" Id="{ef536c4e-ebb4-0814-255c-8383c5789de8}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithSameErrors
VAR
	error1 : MissingKeyDeserializationError('testKey');
	error2 : MockError(MockErrorType:='MISSING_KEY_DESERIALIZATION_ERROR',MockMessage:='Message');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithSameErrors');

AssertTrue(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being the same type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMessage" Id="{9e00e1c0-1e29-08c9-0d4f-5c8d250fd37c}">
      <Declaration><![CDATA[METHOD PUBLIC TestMessage
VAR
	error : MissingKeyDeserializationError('testKey');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMessage');

AssertEquals_String(
	Actual := error.Message,
	Expected := 'Deserialization Failed, Missing Key : testKey',
	Message := 'Did not return the expected Message'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{841393e8-db5d-0bc9-3555-594488606e4c}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
	error : MissingKeyDeserializationError('testKey');
	serializer : MockJsonSerializer;
	result : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

error.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(result), SIZEOF(result));

AssertEquals_String(
	Actual := result,
	Expected := '{"errorType":"MISSING_KEY_DESERIALIZATION_ERROR","message":"Deserialization Failed, Missing Key : testKey"}',
	Message := 'Did not serialize correctly'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>